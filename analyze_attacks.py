"""Script to analyze attacks generated by run_attack.py"""

import argparse

import numpy as np
import matplotlib.pyplot as plt
import scipy.ndimage as ndimage


def apply_kernel_to_image(image, kernel):
    """Apply a kernel to an image."""
    return ndimage.convolve(image, kernel, mode="constant", cval=0.0)


if __name__ == "__main__":

    parser = argparse.ArgumentParser(description="Analyze the timing attack.")
    parser.add_argument("--shmoo-file", help="Shmoo file", default=None, type=str)
    parser.add_argument("--scope-file", help="Scope file", default=None, type=str)
    parser.add_argument(
        "--interpolation",
        help="Select image processing interpolation method",
        default=None,
        type=str,
        choices=[
            "none",
            "antialiased",
            "nearest",
            "bilinear",
            "bicubic",
            "spline16",
            "spline36",
            "hanning",
            "hamming",
            "hermite",
            "kaiser",
            "quadric",
            "catrom",
            "gaussian",
            "bessel",
            "mitchell",
            "sinc",
            "lanczos",
            "blackman",
        ],
    )
    args = parser.parse_args()

    if args.shmoo_file is not None:
        file_content = np.load(args.shmoo_file, allow_pickle=True)
        print(file_content)

        extent = [
            file_content["glitch_lengths"][0] * 20e-3,  # 20ns step size
            file_content["glitch_lengths"][-1] * 20e-3,
            file_content["voltage_levels"][0],
            file_content["voltage_levels"][-1],
        ]
        aspect_ratio = (extent[1] - extent[0]) / (extent[3] - extent[2])

        plt.figure(tight_layout=True)

        schmoo_image = file_content["schmoo"]

        im = plt.imshow(
            schmoo_image,
            extent=extent,
            origin="lower",
            aspect=aspect_ratio,
            interpolation=args.interpolation,
            cmap="RdYlGn",
            vmin=0,
            vmax=2,
        )
        # plt.colorbar(im)
        plt.xlabel(r"Glitch length ($\mu$s)")
        plt.ylabel("Voltage (V)")
        plt.title("Shmoo plot")

        plt.savefig("shmoo_plot", bbox_inches="tight", dpi=300)

    if args.scope_file is not None:
        file_content = np.load(args.scope_file, allow_pickle=True)
        print(file_content)
        buffer_size = file_content["arduino_5v_rail"].shape[0]
        SAMPLE_RATE = 100e6

        t = np.linspace(
            -buffer_size / SAMPLE_RATE / 2, buffer_size / SAMPLE_RATE / 2, buffer_size
        )

        plt.figure(tight_layout=True)

        locked_state = file_content["lock_state_delayed"]
        print(locked_state)

        plt.plot(t * 1e6, file_content["nmos_gate"], label="NMOS gate")
        plt.plot(t * 1e6, file_content["arduino_5v_rail"], label="Arduino 5V rail")
        plt.axhline(1.8, color="red", linestyle="--", label="Arduino brownout", alpha=0.5)
        plt.xlabel(r"Time ($\mu$s)")
        plt.ylabel("Voltage (V)")
        plt.xlim(-1, 4)
        plt.title("Arduino 5V rail and NMOS gate")
        plt.suptitle(f"Device state: {'locked' if locked_state else 'unlocked'}")
        plt.grid()
        plt.legend()

        plt.savefig("scope_plot", bbox_inches="tight", dpi=300)

    plt.show()
